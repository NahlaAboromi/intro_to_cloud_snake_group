# -*- coding: utf-8 -*-
"""Untitled61.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WQ8ynTIBxTc41og6sa0s5KMkmZ7EFWmF
"""

import re

class IndexerService:
    def __init__(self):
        self.index = {}

    def add_document(self, document_id, content):
        """אינדוקס של מסמך לפי מילים"""
        words = re.findall(r'\w+', content.lower())
        for word in words:
            if word not in self.index:
                self.index[word] = set()
            self.index[word].add(document_id)

    def get_index(self):
        """מחזיר את כל האינדקס שנבנה"""
        return self.index

# 🧠 Searcher עם דירוג תוצאות (Scoring)

class SearcherService:
    def __init__(self, index):
        self.index = index

    def search(self, query, operator="AND"):
        """חיפוש רגיל - כמו קודם"""
        terms = query.lower().split()
        results = None

        for term in terms:
            doc_ids = self.index.get(term, set())
            if results is None:
                results = doc_ids
            else:
                if operator == "AND":
                    results = results & doc_ids
                elif operator == "OR":
                    results = results | doc_ids
                else:
                    raise ValueError("Operator must be 'AND' or 'OR'")

        return results if results else set()

    def search_with_ranking(self, query):
        """חיפוש עם דירוג לפי כמה מונחים נמצאו בכל מסמך"""
        terms = query.lower().split()
        scores = {}

        for term in terms:
            doc_ids = self.index.get(term, set())
            for doc_id in doc_ids:
                if doc_id not in scores:
                    scores[doc_id] = 0
                scores[doc_id] += 1

        # ממיינים לפי הציון מהגבוה לנמוך
        ranked_results = sorted(scores.items(), key=lambda item: item[1], reverse=True)
        return ranked_results

# 🎯 שימוש ב-Indexer ו-Searcher

# 1. יוצרים אינדקסר חדש
indexer = IndexerService()

# 2. מוסיפים מסמכים לדוגמה
indexer.add_document('doc1', "Python is a popular programming language for cloud computing")
indexer.add_document('doc2', "Cloud computing enables scalable microservices architecture")
indexer.add_document('doc3', "Python and cloud technologies are growing fast")

# 3. בודקים את האינדקס (רשות, רק כדי לראות)
print("Current index:", indexer.get_index())

# 4. יוצרים חיפוש (Searcher) על האינדקס שבנינו
searcher = SearcherService(indexer.get_index())

# 5. מבצעים חיפוש לדוגמה
query1 = "cloud computing"
results1 = searcher.search(query1, operator="AND")
print(f"Results for '{query1}' (AND):", results1)

query2 = "cloud python"
results2 = searcher.search(query2, operator="OR")
print(f"Results for '{query2}' (OR):", results2)

ranked_results = searcher.search_with_ranking("cloud computing")
print(ranked_results)

"""# Project: Serverless Search System (Week 8)

## Description
This project demonstrates a simple microservices-based search engine using serverless (FaaS) concepts, implemented in Google Colab.

## Microservices
- **Indexer Service**: Responsible for building an index from document contents.
- **Searcher Service**: Responsible for searching documents using AND/OR logic and ranking results.

## How it Works
1. Documents are indexed using the IndexerService.
2. Searches are performed using SearcherService, supporting:
   - Logical operators: AND / OR
   - Result ranking based on how many query terms matched.

## Example Usage
- Indexing documents:
  ```python
  indexer.add_document('doc1', "Python and cloud computing")
  ```

- Searching with AND:
  ```python
  searcher.search("cloud computing", operator="AND")
  ```

- Searching with ranking:
  ```python
  searcher.search_with_ranking("cloud computing")
  ```

## Additional Notes
- The services are stateless and event-driven.
- The structure follows Function as a Service (FaaS) principles.

"""